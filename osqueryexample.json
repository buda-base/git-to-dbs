GET bdrc_prod/_search
{
  "from": 0,
  "size": 0,
  "aggs": {
    "type": {
      "terms": {
        "field": "type"
      }
    },
    "inCollection": {
      "terms": {
        "field": "inCollection"
      }
    },
    "associatedTradition": {
      "terms": {
        "field": "associatedTradition"
      }
    },
    "personGender": {
      "terms": {
        "field": "personGender"
      }
    },
    "associatedCentury": {
      "terms": {
        "field": "associatedCentury"
      }
    },
    "printMethod": {
      "terms": {
        "field": "printMethod"
      }
    },
    "script": {
      "terms": {
        "field": "script"
      }
    },
    "workIsAbout": {
      "terms": {
        "field": "workIsAbout"
      }
    },
    "workGenre": {
      "terms": {
        "field": "workGenre"
      }
    },
    "author": {
      "terms": {
        "field": "author"
      }
    },
    "translator": {
      "terms": {
        "field": "translator"
      }
    }
  },
  "highlight": {
    "fields": {
      "prefLabel_bo_x_ewts": {},
      "altLabel_bo_x_ewts": {},
      "seriesName_bo_x_ewts": {},
      "seriesName_en": {}
    }
  },
  "query": {
    "function_score": {
      "script_score": {
        "script": {
          "id": "bdrc-score"
        }
      },
      "query": {
        "bool": {
          "must": [
            {
              "multi_match": {
                "type": "phrase",
                "query": "spyod 'jug",
                "fields": [
                  "seriesName_bo_x_ewts^0.1",
                  "seriesName_en^0.1",
                  "authorshipStatement_bo_x_ewts^0.005",
                  "authorshipStatement_en^0.005",
                  "publisherName_bo_x_ewts^0.01",
                  "publisherLocation_bo_x_ewts^0.01",
                  "publisherName_en^0.01",
                  "publisherLocation_en^0.01",
                  "prefLabel_bo_x_ewts^1",
                  "prefLabel_en^1",
                  "comment_bo_x_ewts^0.0001",
                  "comment_en^0.0001",
                  "altLabel_bo_x_ewts^0.6",
                  "altLabel_en^0.6"
                ]
              }
            } ,
            {
              "multi_match": {
                "type": "phrase_prefix",
                "query": "spyod 'jug",
                "fields": [
                  "seriesName_bo_x_ewts^0.1",
                  "seriesName_en^0.1",
                  "authorshipStatement_bo_x_ewts^0.005",
                  "authorshipStatement_en^0.005",
                  "publisherName_bo_x_ewts^0.01",
                  "publisherLocation_bo_x_ewts^0.01",
                  "publisherName_en^0.01",
                  "publisherLocation_en^0.01",
                  "prefLabel_bo_x_ewts^1",
                  "prefLabel_en^1",
                  "comment_bo_x_ewts^0.0001",
                  "comment_en^0.0001",
                  "altLabel_bo_x_ewts^0.6",
                  "altLabel_en^0.6"
                ]
              }
            }
          ]
        }
      }
    }
  }
}


POST _scripts/bdrc-score
{
  "script": {
    "lang": "painless",
    "source": """
        double score = 0.0;

        // BM25
        score += _score;

        // PAGE TYPE
        if (doc['type'].value.contains('Instance')) {score *= 1;}
        else if (doc['type'].value.contains('Person')) {score *= 0.9;}
        else if (doc['type'].value.contains('Topic')) {score *= 0.8;}
        else if (doc['type'].value.contains('PartTypeText')) {score *= 0.75;}
        else if (doc['type'].value.contains('PartTypeVolume')) {score *= 0.6;}
        else if (doc['type'].value.contains('PartTypeCodicologicalVolume')) {score *= 0.6;}
        else if (doc['type'].value.contains('PartTypeChapter')) {score *= 0.55;}
        else if (doc['type'].value.contains('PartTypeSection')) {score *= 0.55;}
        else if (doc['type'].value.contains('Collection')) {score *= 0.5;} // Organisation
        else if (doc['type'].value.contains('Place')) {score *= 0.4;}
        else if (doc['type'].value.contains('PartTypeEditorial')) {score *= 0.01;}
        else if (doc['type'].value.contains('PartTypeTableOfContent')) {score *= 0.01;}

        // PRINT METHOD
        if (doc['printMethod'].size() !=0 && doc['printMethod'].value.contains('PrintMethod_Modern')) {score *= 1.1;}


        // ACCESS LEVELS
        //   scans
        //   5: open access on BDRC
        //   4: open access through IIIF
        //   3: IA
        //   2: extract only
        //   1: no access
        //   etext
        //   3: open access
        //   2: search only
        //   1: no access
            if (doc['scans_access'].size() != 0 || doc['etext_access'].size() != 0){
            double access = 10000; // errors on top

            int scans_access = doc['scans_access'].size() != 0 ? (int) doc['scans_access'].value : 0;
            int etext_access = doc['etext_access'].size() != 0 ? (int) doc['etext_access'].value : 0;

            if (scans_access == 5 && etext_access == 3) { access = 1.0;}        // open scans and etext
            else if (scans_access == 5) { access = 0.9;}                        // open scans, etext not fully open
            else if (scans_access == 4 && etext_access == 3) { access = 1.0;}   // scans iiif, open etext
            else if (scans_access == 4) { access = 0.8;}                        // scans iiif, etext not fully open
            else if (scans_access == 3 && etext_access == 3) { access = 0.9;}   // scans ia, open etext
            else if (scans_access == 3 && etext_access == 2) { access = 0.55;}  // scans ia, etext search only
            else if (scans_access == 3) { access = 0.5;}                        // scans ia, no etext
            else if (scans_access == 2 && etext_access == 3) { access = 0.85;}  // scans 40 pages extract, open etext
            else if (scans_access == 2) { access = 0.4;}                        // scans 40 pages extract, limited or no etext
            else if (scans_access == 1 && etext_access == 3) { access = 0.75;}  // no scans, open etext
            else if (scans_access == 1 && etext_access == 2) { access = 0.35;}  // no scans, etext search only
            else if (scans_access == 1 && etext_access == 1) { access = 0.25;}  // nothing to read, metadata only

            score *= access;
        }

        // POPULARITY AND DB SCORES
        // pop_scores range from 0.4 to 1 in the index
        // This would boost the most popular texts by 2.5 compared to the least popular (1/0.4 = 2.5)
        // To boost more, increase pop_boost_adjustment.
        // For example, adjustment of 0.2 shifts the range to 0.2-0.8, and produces 4x relative boosts (0.8/0.2 = 4).
        // The reason to boost more is that only 680 texts have a pop_score higher than 0.5,
        // which means that a huge majority is between 0.4 and 0.5,
        // To make the boost around 1.5 at pop_score 0.5, which seems good,
        // we adjust by 0.2. (range becomes 0.2-0.3 with the difference between low and high 0.3/0.2 = 1.5).

        // NOTE: Pop and db scores can make search ignore keywords.  If this happens, decrease both pop_boost_adjustment and db_score_adjustment.

        // Decrease this to boost less by pop_score, increase to boost more.
        double pop_boost_adjustment = 0.2;

        double pop_score = doc['pop_score'].size() != 0 ? doc['pop_score'].value - pop_boost_adjustment: 0.4 - pop_boost_adjustment;
        score *= pop_score;

        // db_scores range from 0.5 to 1
        // Same logic as with pop_score.  Adjustment of 0.4 makes the range 0.2-0.6, and produces 3x relative boosts (0.6/0.2 = 3).
        double db_score_adjustment = 0.4;

        double db_score = doc['db_score'].size() != 0 ? doc['db_score'].value - db_score_adjustment: 0.5 - db_score_adjustment;
        score *= db_score;

        // FRESHNESS
        // Compensate pop_score to give new texts a chance to become popular
        // Texts published today get a 1.7 boost
        // After 100 days, 1.35
        // 300 days, 1.088
        // 600 days, 1.011

        if (doc['type'].value == 'Instance' || doc['type'].value.startsWith('Part')) {
            if (doc['creation_date'].size() != 0) {
                double creation_date = doc['creation_date'].value.toInstant().toEpochMilli();
                double current_date = new Date().getTime();
                double days_difference = (current_date - creation_date) / (1000 * 60 * 60 * 24);
                double freshness = Math.pow(2, -(10 * days_difference / 1000)) * 0.7 + 1;
                score *= freshness;
            }
        }

        return score;    
    """
  }
}
